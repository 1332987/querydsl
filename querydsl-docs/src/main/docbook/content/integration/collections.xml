<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="collections_integration" revision="1">

  <title>Querying Collections</title>
  
  <para>The querydsl-collections module can be used with generated query types and without. 
  The first section describes the usage without generated query types :</para>

  <sect2>
    <title>Usage without generated query types</title>

    <para>
      To use querydsl-collections without generated query types you need to
      use the Querydsl alias feature.
      Here are some examples.
    </para>
    
    <para>
      To get started, add the following static imports :
  </para>

    <programlisting language="java"><![CDATA[
import static com.mysema.query.collections.MiniApi.*;
import static com.mysema.query.alias.Alias.*; // for alias usage
]]></programlisting>
    
    <para>
      And now create an alias instance for the Cat class. Alias instances can only be created for
      classes with an empty constructor. Make sure your class has one.
    </para>  
     
    <para>  
      The alias instance of type Cat and it's getter invocations are 
      transformed into Querydsl paths by wrapping them into dollar method invocations. 
       The call <emphasis>c.getKittens()</emphasis> for example is internally
      transformed into the property path c.kittens inside the dollar method.
    </para>

    <programlisting language="java"><![CDATA[
Cat c = alias(Cat.class, "cat");
for (String name : from($(c),cats)
  .where($(c.getKittens()).size().gt(0))
  .list($(c.getName()))){
    System.out.println(name);
}
]]></programlisting>

    <para>
      The following example is a variation of the previous, where the access
      to the list size happens inside the dollar-method invocation.
    </para>

    <programlisting language="java"><![CDATA[
Cat c = alias(Cat.class, "cat");
for (String name : from($(c),cats)
  .where($(c.getKittens().size()).gt(0))
  .list($(c.getName()))){
    System.out.println(name);
}
]]></programlisting>

    <para>
      All non-primitive and non-String typed properties of aliases are aliases
      themselves. So you may cascade method calls until you hit a
      primitive or String type in the dollar-method scope.
  </para>
    <para>
      e.g.
  </para>

    <programlisting language="java"><![CDATA[
$(c.getMate().getName())
]]></programlisting>

    <para>
      is transformed into <emphasis>c.mate.name</emphasis> internally, but
  </para>

    <programlisting language="java"><![CDATA[
$(c.getMate().getName().toLowerCase())
]]></programlisting>

    <para>
      is not transformed properly, since the toLowerCase() invocation is not tracked.
  </para>
    <para>
      Note also that you may only invoke getters, size(), contains(Object) and
      get(int) on alias types. All other invocations throw exceptions.
    </para>

  </sect2>
  
  <sect2>
    
    <title>Usage with generated query types</title>
    
    <para>
      The example above can be expressed like this with generated query types
    </para>

    <programlisting language="java"><![CDATA[
QCat cat = new QCat("cat");
for (String name : from(cat,cats)
  .where(cat.kittens.size().gt(0))
  .list(cat.name)){
    System.out.println(name);
}
]]></programlisting>    

   <para>When you use generated query types, you instantiate query types instead of alias instances and use the property
   paths directly without any dollar-method wrapping.</para>
   
  </sect2>
  
  <sect2>
  
   <title>Maven integration</title>   
   
   <para>
   If you are not using JPA or JDO you can generate Querydsl query types for your domain types by annotating them
   with the com.mysema.query.annotations.QueryEntity annotation and adding the following plugin configuration into your
   Maven configuration (pom.xml) :
   </para>
 
    <programlisting language="xml"><![CDATA[
<project>
  <build>
  <plugins>
    ...
    <plugin>
      <groupId>com.mysema.maven</groupId>
      <artifactId>maven-apt-plugin</artifactId>
      <version>0.3.0</version>
      <executions>
        <execution>
          <goals>
            <goal>process</goal>
          </goals>
          <configuration>
            <outputDirectory>target/generated-sources/java</outputDirectory>
            <processor>com.mysema.query.apt.QuerydslAnnotationProcessor</processor>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
  </build>
</project>
]]></programlisting> 
 
  </sect2>

</sect1>