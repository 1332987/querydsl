<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="sql_integration" revision="1">
  
  <title>Querying SQL/JDBC sources</title>
  
  <para>The querydsl-sql module is still in Beta stage and hasn't been tested much, but it is functional and usable.</para>
  
  <para>This chapter describes the query type generation and querying functionality of the module.</para>
  
  <sect2>
  
    <title>Creating the Querydsl query types</title>
  
  <para>To get started export your schema into Querydsl query types like this :</para>
  
<programlisting language="java"><![CDATA[  
java.sql.Connection conn; // connection of database containing the schema to use
MetaDataExporter exporter = new MetaDataExporter("Q", "com.myproject.domain", null, null, "src/main/java");
exporter.export(conn.getMetaData());
]]></programlisting>

  <para>This declares that the database schema is to be mirrored into the com.myproject.domain package in the src/main/java folder.</para>
  
  <para>This functionality might get packaged into an Maven plugin in the future.</para>
  
  <para>The generated types have the table name transformed to mixed case as the class name and a similar mixed case transformation
  applied to the columns which are available as property paths in the query type.</para>

  </sect2>
  
  <sect2>
  
    <title>Querying</title>
  
    <para>Querying with Querydsl SQL is as simple as this :</para>
    
<programlisting language="java"><![CDATA[ 
QCustomer customer = new QCustomer("c");

SQLTemplates dialect = new HSQLDBTemplates(); // SQL-dialect
SQLQuery query = SQLQueryImpl(connection, dialect); 
List<String> lastNames = query.from(customer)
    .where(customer.firstName.eq("Bob"))
    .list(customer.lastName);
]]></programlisting>  

    <para>which is transformed into the following sql query, assuming that the related table name is 
    <emphasis>customer</emphasis> and the columns <emphasis>first_name</emphasis> and 
    <emphasis>last_name</emphasis> :</para>
    
<programlisting language="sql"><![CDATA[     
SELECT c.last_name FROM customer c WHERE c.first_name = 'Bob'
]]></programlisting>  

    <para>Internally Querydsl SQL uses PreparedStatements, though.</para>

    <para>Querydsl uses SQL dialects to customize the SQL serialization needed for different relational databases. The
    available dialects are <emphasis>DerbyTemplates</emphasis>, <emphasis>HSQLDBTemplates</emphasis>, 
    <emphasis>MySQLTemplates</emphasis> and <emphasis>OracleTemplates</emphasis>.</para>
    
  </sect2>
  
  <sect2>
  
    <title>Using Data manipulation commands</title>
    
    <para>TODO</para>
  
  </sect2>
  
</sect1>    