<document>
  <properties>
    <author email="timo@mysema.com">Timo Westk√§mper</author>
    <title>Querydsl</title>
  </properties>
  <body>
    <section name="Querydsl">
      <p>
      Querydsl (spell: query diesel) is a framework which enables the construction of statically typed SQL-like queries. 
      Instead of writing queries as inline strings or externalizing them into XML files they can be constructed via a 
      <a href="http://www.martinfowler.com/bliki/FluentInterface.html">fluent</a> 
      <a href="http://www.martinfowler.com/bliki/DomainSpecificLanguage.html">DSL</a>/API like Querydsl.
      </p>
      
      <p>
      The benefits of using a fluent API in comparison to simple strings are 
      <ul>
        <li>code completion in IDE</li>
        <li>almost none syntactically invalid queries allowed</li>
        <li>domain types and properties can be referenced safely</li>
        <li>adopts better to refactoring changes in domain types</li>        
      </ul>
      </p>

      <p>
      Here a quick example for the impatient ones :
<source>
    <span style="font-weight:bold;">public</span> SearchResults&lt;Bookmark&gt; findBookmarksWithTags(String[] tagNames,
            QueryModifiers mod) {
        <span style="font-weight:bold;">return</span> select(distinct(<span style="color:blue;">bookmark</span>)).from(<span style="color:blue;">bookmark</span>)
                .innerJoin(<span style="color:blue;">FETCH</span>, <span style="color:blue;">bookmark.address</span>)
                .innerJoin(<span style="color:blue;">bookmark.tags</span>.as(<span style="color:blue;">tag1</span>))
                .where(<span style="color:blue;">tag1.name</span>.in(tagNames))
            .orderBy(<span style="color:blue;">bookmark.created</span>.desc()).restrict(mod).listResults();
    }
</source>      
     which represents the followoing HQL query
     
<source>
  select distinct bookmark from Bookmark bookmark
  inner join fetch bookmark.address
  inner join bookmark.tags as tag1
  where tag1.name in :tagNames
  order by bookmark.created desc
</source>     
      
      </p>
      
      <p>
      More examples of Hibernate queries and their Querydsl equivalents can be found 
      <a href="xref-test/com/mysema/query/grammar/hql/HqlParserTest.html">here</a>.
      </p>
    </section>
     
  </body>
</document>