<document>
  <properties>
    <author email="timo@mysema.com">Timo Westk√§mper</author>
    <title>Getting started</title>
  </properties>
  <body>  
    
    <section name="Getting started">
      <p>
      The basic steps to get querydsl working in your project are the following :
      <ul>
        <li>Add the main querydsl dependencies into your project pom : querydsl-hql (default scope) and querydsl-apt (provided scope)</li>

        <li>Add the following plugin configuration
<source>        
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.myfaces.tobago&lt;/groupId&gt;
        &lt;artifactId&gt;maven-apt-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.0.15&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;generate-sources&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;execute&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;force&gt;true&lt;/force&gt;
              &lt;fork&gt;true&lt;/fork&gt;
              &lt;factory&gt;com.mysema.query.apt.APTFactory&lt;/factory&gt;
              &lt;generated&gt;target/generated-sources/java&lt;/generated&gt;
              &lt;nocompile&gt;true&lt;/nocompile&gt;
              &lt;A&gt;
                -AdestClass=com.mysema.someproject.dao.domain.Domain,
                -AdtoClass=com.mysema.someproject.dao.domain.Dtos
              &lt;/A&gt;
              &lt;includes&gt;
                &lt;include&gt;
                  com/mysema/someproject/dao/domain/*.java
                &lt;/include&gt;
                &lt;include&gt;com/mysema/someproject/ui/dto/*.java&lt;/include&gt;
              &lt;/includes&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
</source>      
        The APT-plugin generates querydsl domain types into the class specified after -AdestClass= and querydsl DTO types
        into -AdtoClass=. DTO types in your project domain need to be annotated with com.mysema.query.annotations.DTO and 
        for project domain types standard Hibernate annotations are used.        
        </li>        

        <li>
        You can now create querydsl domain type instances like this :

<source>
    protected final Domain.Address address = new Domain.Address("address");
    
    protected final Domain.Bookmark bookmark = new Domain.Bookmark("bookmark");
    
    protected final Domain.NetworkLink nl = new Domain.NetworkLink("nl");
    
    protected final Domain.Subscription sub = new Domain.Subscription("sub");
    
    protected final Domain.Tag tag1 = new Domain.Tag("tag1");
</source>

        and reference them in your queries like this
        
<source>
    public SearchResults&lt;Bookmark&gt; findBookmarksWithTags(String[] tagNames,
            QueryModifiers mod) {
        return select(distinct(bookmark)).from(bookmark)
                .innerJoin(FETCH, bookmark.address)
                .innerJoin(bookmark.tags.as(tag1))
                .where(tag1.name.in(tagNames))
            .orderBy(bookmark.created.desc()).restrict(mod).listResults();
    }
    
    protected &lt;RT&gt; HqlQuery&lt;RT&gt; select(Expr&lt;RT&gt; s){
        return new HqlQuery&lt;RT&gt;(currentSession()).select(s);
    }   
        
</source>            

      The method distinct is taken via a static import from com.mysema.query.grammar.HqlGrammar  
        </li>
      </ul>
      </p>
      
      <p>
      For more examples on how to use the querydsl API visit the API docs of the querydsl-core and querydsl-hql modules 
      or look through the examples in the <a href="xref/index.html">source code</a>.
      </p>
      
      <p>
      Feel also free to contact us if you need any help.      
      </p>
    </section>
  
  </body>
</document>